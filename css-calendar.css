body {
	font-family: "Arial", "Courier", sans-serif;
	font-size: 1rem;
}

/* Select Window Placement */
#selection {
	text-align: center;
}

/* Dropdown Styling */
select {
	height: 2rem;
	background-color: white;
	font-weight: 700;
	font-size: 24px;
	color: black;
}
select option {
	color: black;
}
select option:checked {
	background-color: red;
	color: white;
	font-weight: 700;
}
select option:hover {
	background-color: green;
}

/* Century Dropdown */
/* Contains two main variables:
	a) centuryKey: used to denote century based calculations
	b) centuryLeap: determines whether the century in the form of XX00 is a leap year
*/

#selection:has(.century-option:checked) ~ * {
	--centuryLeap: 0; /* default */
}

#selection:has(#century-18:checked) ~ *,
#selection:has(#century-22:checked) ~ *,
#selection:has(#century-26:checked) ~ * {
	--centuryKey: 2;
}
#selection:has(#century-19:checked) ~ *,
#selection:has(#century-23:checked) ~ *,
#selection:has(#century-27:checked) ~ * {
	--centuryKey: 0;
}
#selection:has(#century-20:checked) ~ *,
#selection:has(#century-24:checked) ~ *,
#selection:has(#century-28:checked) ~ * {
	--centuryKey: 6;
	--centuryLeap: 1;
}
#selection:has(#century-21:checked) ~ *,
#selection:has(#century-25:checked) ~ *,
#selection:has(#century-29:checked) ~ * {
	--centuryKey: 4;
}

/* Decade Dropdown */
/* Contains four main variables:
	a) L2Ddiv4m7: Last 2 digits of the year, with integer division by 4, mod 7
	b) L2Dm7: Last 2 digits of the year, mod 7
	c) L2DLeap: Are the last two digits normally associated with a leap year?
	d) L2DDbl0: Is it Double Zero? (This will only be 1 for 00)
*/

#selection:has(.decade-option:checked):has(.single-option:checked) ~ * {
	--L2DDbl0: 0;
	--L2DLeap: 0;
}

/* 00 to 09 */
#selection:has(#decade-00:checked):has(#single-00:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 0;	--L2DLeap: 1;	--L2DDbl0: 1;
}
#selection:has(#decade-00:checked):has(#single-01:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 1;
}
#selection:has(#decade-00:checked):has(#single-02:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 2;
}
#selection:has(#decade-00:checked):has(#single-03:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 3;
}
#selection:has(#decade-00:checked):has(#single-04:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 4;	--L2DLeap: 1;	
}
#selection:has(#decade-00:checked):has(#single-05:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 5;
}
#selection:has(#decade-00:checked):has(#single-06:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 6;
}
#selection:has(#decade-00:checked):has(#single-07:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 0;
}
#selection:has(#decade-00:checked):has(#single-08:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 1;	--L2DLeap: 1;	
}
#selection:has(#decade-00:checked):has(#single-09:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 2;
}

/* 10 to 19 */
#selection:has(#decade-10:checked):has(#single-00:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 3;
}
#selection:has(#decade-10:checked):has(#single-01:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 4;
}
#selection:has(#decade-10:checked):has(#single-02:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 5;	--L2DLeap: 1;	
}
#selection:has(#decade-10:checked):has(#single-03:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 6;
}
#selection:has(#decade-10:checked):has(#single-04:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 0;
}
#selection:has(#decade-10:checked):has(#single-05:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 1;
}
#selection:has(#decade-10:checked):has(#single-06:checked) ~ * {
	--L2Ddiv4m7: 4; --L2Dm7: 2;	--L2DLeap: 1;	
}
#selection:has(#decade-10:checked):has(#single-07:checked) ~ * {
	--L2Ddiv4m7: 4; --L2Dm7: 3;
}
#selection:has(#decade-10:checked):has(#single-08:checked) ~ * {
	--L2Ddiv4m7: 4; --L2Dm7: 4;
}
#selection:has(#decade-10:checked):has(#single-09:checked) ~ * {
	--L2Ddiv4m7: 4; --L2Dm7: 5;
}

/* 20 to 29 */
#selection:has(#decade-20:checked):has(#single-00:checked) ~ * {
	--L2Ddiv4m7: 5; --L2Dm7: 6;	--L2DLeap: 1;	
}
#selection:has(#decade-20:checked):has(#single-01:checked) ~ * {
	--L2Ddiv4m7: 5; --L2Dm7: 0;
}
#selection:has(#decade-20:checked):has(#single-02:checked) ~ * {
	--L2Ddiv4m7: 5; --L2Dm7: 1;
}
#selection:has(#decade-20:checked):has(#single-03:checked) ~ * {
	--L2Ddiv4m7: 5; --L2Dm7: 2;
}
#selection:has(#decade-20:checked):has(#single-04:checked) ~ * {
	--L2Ddiv4m7: 6; --L2Dm7: 3;	--L2DLeap: 1;	
}
#selection:has(#decade-20:checked):has(#single-05:checked) ~ * {
	--L2Ddiv4m7: 6; --L2Dm7: 4;
}
#selection:has(#decade-20:checked):has(#single-06:checked) ~ * {
	--L2Ddiv4m7: 6; --L2Dm7: 5;
}
#selection:has(#decade-20:checked):has(#single-07:checked) ~ * {
	--L2Ddiv4m7: 6; --L2Dm7: 6;
}
#selection:has(#decade-20:checked):has(#single-08:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 0;	--L2DLeap: 1;	
}
#selection:has(#decade-20:checked):has(#single-09:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 1;
}

/* 30 to 39 */
#selection:has(#decade-30:checked):has(#single-00:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 2;
}
#selection:has(#decade-30:checked):has(#single-01:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 3;
}
#selection:has(#decade-30:checked):has(#single-02:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 4;	--L2DLeap: 1;	
}
#selection:has(#decade-30:checked):has(#single-03:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 5;
}
#selection:has(#decade-30:checked):has(#single-04:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 6;
}
#selection:has(#decade-30:checked):has(#single-05:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 0;
}
#selection:has(#decade-30:checked):has(#single-06:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 1;	--L2DLeap: 1;	
}
#selection:has(#decade-30:checked):has(#single-07:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 2;
}
#selection:has(#decade-30:checked):has(#single-08:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 3;
}
#selection:has(#decade-30:checked):has(#single-09:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 4;
}

/* 40 to 49 */
#selection:has(#decade-40:checked):has(#single-00:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 5;	--L2DLeap: 1;	
}
#selection:has(#decade-40:checked):has(#single-01:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 6;
}
#selection:has(#decade-40:checked):has(#single-02:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 0;
}
#selection:has(#decade-40:checked):has(#single-03:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 1;
}
#selection:has(#decade-40:checked):has(#single-04:checked) ~ * {
	--L2Ddiv4m7: 4; --L2Dm7: 2;	--L2DLeap: 1;	
}
#selection:has(#decade-40:checked):has(#single-05:checked) ~ * {
	--L2Ddiv4m7: 4; --L2Dm7: 3;
}
#selection:has(#decade-40:checked):has(#single-06:checked) ~ * {
	--L2Ddiv4m7: 4; --L2Dm7: 4;
}
#selection:has(#decade-40:checked):has(#single-07:checked) ~ * {
	--L2Ddiv4m7: 4; --L2Dm7: 5;
}
#selection:has(#decade-40:checked):has(#single-08:checked) ~ * {
	--L2Ddiv4m7: 5; --L2Dm7: 6;	--L2DLeap: 1;	
}
#selection:has(#decade-40:checked):has(#single-09:checked) ~ * {
	--L2Ddiv4m7: 5; --L2Dm7: 0;
}

/* 50 to 59 */
#selection:has(#decade-50:checked):has(#single-00:checked) ~ * {
	--L2Ddiv4m7: 5; --L2Dm7: 1;
}
#selection:has(#decade-50:checked):has(#single-01:checked) ~ * {
	--L2Ddiv4m7: 5; --L2Dm7: 2;
}
#selection:has(#decade-50:checked):has(#single-02:checked) ~ * {
	--L2Ddiv4m7: 6; --L2Dm7: 3;	--L2DLeap: 1;	
}
#selection:has(#decade-50:checked):has(#single-03:checked) ~ * {
	--L2Ddiv4m7: 6; --L2Dm7: 4;
}
#selection:has(#decade-50:checked):has(#single-04:checked) ~ * {
	--L2Ddiv4m7: 6; --L2Dm7: 5;
}
#selection:has(#decade-50:checked):has(#single-05:checked) ~ * {
	--L2Ddiv4m7: 6; --L2Dm7: 6;
}
#selection:has(#decade-50:checked):has(#single-06:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 0;	--L2DLeap: 1;	
}
#selection:has(#decade-50:checked):has(#single-07:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 1;
}
#selection:has(#decade-50:checked):has(#single-08:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 2;
}
#selection:has(#decade-50:checked):has(#single-09:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 3;
}

/* 60 to 69 */
#selection:has(#decade-60:checked):has(#single-00:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 4;	--L2DLeap: 1;	
}
#selection:has(#decade-60:checked):has(#single-01:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 5;
}
#selection:has(#decade-60:checked):has(#single-02:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 6;
}
#selection:has(#decade-60:checked):has(#single-03:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 0;
}
#selection:has(#decade-60:checked):has(#single-04:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 1;	--L2DLeap: 1;	
}
#selection:has(#decade-60:checked):has(#single-05:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 2;
}
#selection:has(#decade-60:checked):has(#single-06:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 3;
}
#selection:has(#decade-60:checked):has(#single-07:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 4;	
}
#selection:has(#decade-60:checked):has(#single-08:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 5;	--L2DLeap: 1;	
}
#selection:has(#decade-60:checked):has(#single-09:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 6;
}

/* 70 to 79 */
#selection:has(#decade-70:checked):has(#single-00:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 0;
}
#selection:has(#decade-70:checked):has(#single-01:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 1;
}
#selection:has(#decade-70:checked):has(#single-02:checked) ~ * {
	--L2Ddiv4m7: 4; --L2Dm7: 2; --L2DLeap: 1;
}
#selection:has(#decade-70:checked):has(#single-03:checked) ~ * {
	--L2Ddiv4m7: 4; --L2Dm7: 3;
}
#selection:has(#decade-70:checked):has(#single-04:checked) ~ * {
	--L2Ddiv4m7: 4; --L2Dm7: 4;
}
#selection:has(#decade-70:checked):has(#single-05:checked) ~ * {
	--L2Ddiv4m7: 4; --L2Dm7: 5;	
}
#selection:has(#decade-70:checked):has(#single-06:checked) ~ * {
	--L2Ddiv4m7: 5; --L2Dm7: 6;	--L2DLeap: 1;	
}
#selection:has(#decade-70:checked):has(#single-07:checked) ~ * {
	--L2Ddiv4m7: 5; --L2Dm7: 0;
}
#selection:has(#decade-70:checked):has(#single-08:checked) ~ * {
	--L2Ddiv4m7: 5; --L2Dm7: 1;
}
#selection:has(#decade-70:checked):has(#single-09:checked) ~ * {
	--L2Ddiv4m7: 5; --L2Dm7: 2;
}

/* 80 to 89 */
#selection:has(#decade-80:checked):has(#single-00:checked) ~ * {
	--L2Ddiv4m7: 6; --L2Dm7: 3;	--L2DLeap: 1;	
}
#selection:has(#decade-80:checked):has(#single-01:checked) ~ * {
	--L2Ddiv4m7: 6; --L2Dm7: 4;
}
#selection:has(#decade-80:checked):has(#single-02:checked) ~ * {
	--L2Ddiv4m7: 6; --L2Dm7: 5;
}
#selection:has(#decade-80:checked):has(#single-03:checked) ~ * {
	--L2Ddiv4m7: 6; --L2Dm7: 6;
}
#selection:has(#decade-80:checked):has(#single-04:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 0;	--L2DLeap: 1;	
}
#selection:has(#decade-80:checked):has(#single-05:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 1;
}
#selection:has(#decade-80:checked):has(#single-06:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 2;
}
#selection:has(#decade-80:checked):has(#single-07:checked) ~ * {
	--L2Ddiv4m7: 0; --L2Dm7: 3;
}
#selection:has(#decade-80:checked):has(#single-08:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 4;	--L2DLeap: 1;	
}
#selection:has(#decade-80:checked):has(#single-09:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 5;
}

/* 90 to 09 */
#selection:has(#decade-90:checked):has(#single-00:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 6;
}
#selection:has(#decade-90:checked):has(#single-01:checked) ~ * {
	--L2Ddiv4m7: 1; --L2Dm7: 0;
}
#selection:has(#decade-90:checked):has(#single-02:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 1;	--L2DLeap: 1;	
}
#selection:has(#decade-90:checked):has(#single-03:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 2;
}
#selection:has(#decade-90:checked):has(#single-04:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 3;	
}
#selection:has(#decade-90:checked):has(#single-05:checked) ~ * {
	--L2Ddiv4m7: 2; --L2Dm7: 4;
}
#selection:has(#decade-90:checked):has(#single-06:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 5;	--L2DLeap: 1;	
}
#selection:has(#decade-90:checked):has(#single-07:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 6;
}
#selection:has(#decade-90:checked):has(#single-08:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 0;
}
#selection:has(#decade-90:checked):has(#single-09:checked) ~ * {
	--L2Ddiv4m7: 3; --L2Dm7: 1
}

/* Months */
/* Six variables here:
	a) monthKey: used for the calculations of the DOW
	b) v29: Does the month have at least 29 days
	c) v30: Does the month have at least 30 days
	d) v31: Does the month have at least 31 days
	e) isFeb: Is it February?
	f) monthLeap: Only applies to January and February, helps with computing leap year calculations
*/
#selection:has(.month-option:checked) ~ * {
	--v29: 1; --v30: 1; --isFeb: 0; --monthLeap: 0; /* defaults */
}
#selection:has(#month-01:checked) ~ * {
	--monthKey: 1; --v31: 1; --monthLeap: 1;
}
#selection:has(#month-02:checked) ~ * {
	--monthKey: 4; --v29: 0; --v30: 0; --v31: 0; --monthLeap: 1; --isFeb: 1;
	/* If the year is calculated as a leap year, v29 gets bumped up to 1 later on */
}
#selection:has(#month-03:checked) ~ * {
	--monthKey: 4; --v31: 1;
}
#selection:has(#month-04:checked) ~ * {
	--monthKey: 0; --v31: 0;
}
#selection:has(#month-05:checked) ~ * {
	--monthKey: 2; --v31: 1;
}
#selection:has(#month-06:checked) ~ * {
	--monthKey: 5; --v31: 0;
}
#selection:has(#month-07:checked) ~ * {
	--monthKey: 0; --v31: 1;
}
#selection:has(#month-08:checked) ~ * {
	--monthKey: 3; --v31: 1;
}
#selection:has(#month-09:checked) ~ * {
	--monthKey: 6; --v31: 0;
}
#selection:has(#month-10:checked) ~ * {
	--monthKey: 1; --v31: 1;
}
#selection:has(#month-11:checked) ~ * {
	--monthKey: 4; --v31: 0;
}
#selection:has(#month-12:checked) ~ * {
	--monthKey: 6; --v31: 1;
}

/* Calculation section */
#selection:has(.century-option:checked) ~ *,
#selection:has(.decade-option:checked) ~ *,
#selection:has(.single-option:checked) ~ *,
#selection:has(.month-option:checked) ~ * {

	/* STANDARD CALCULATION OF DOW ALGORITHM */
	/*
	1) Take the last two digits of the year, and divide by 4, discarding any fraction.
	2) Add the day of the month.
	3) Add the month's key value:
	JFM AMJ JAS OND
	144 025 036 146
	4) Subtract 1 for January or February of a leap year
	5) For a Gregorian date, add 0 for 1900's, 6 for 2000's, 4 for 1700's, 2 for 1800's; for other years, add or subtract multiples of 400.
	6) Add the last two digits of the year.
	7) Divide by 7 and take the remainder, i.e. perform modulo 7.

	*** Calculation of leap year boolean ***

	So here's what we know. A year is a leap year if (a), the last two digits of the year are divisible by 4;
	and (b), if the special case of it being a 00 year, that the century is also divisible by 4.

	That being the case, we now have a three-way truth table:

	Century Divisible by 4, represented by C (--centuryLeap)
	Last 2 Digits Divisible by 4, represented by D (--L2DLeap)
	Last 2 Digits Equal 00, represented by Z (--L2DDbl0)

	  H G F E D C B A
	C 1 1 1 1 0 0 0 0
	D 1 1 0 0 1 1 0 0
	Z 1 0 1 0 1 0 1 0
	R 1 1 0 0 0 1 0 0

	Examples
	a) 1907, b) n/a, c) 1908, d) 1900, e) 2001, f) n/a, g) 2008, h) 2000

	This truth table is equivalent to: (C AND D) OR (D AND NOT Z), essentially MAX(MIN(C, D), MIN(D, 1 - Z))

	Luckily C, D and Z are all Boolean pulses (either 1 or 0), so we can calculate this, resulting in either a 1 (True) or 0 (False). 
	
	Update: We're going to be talking advantage of min() and max() functions for AND and OR gates respectively, (1 - x) will be used for NOT x. Currently there are no CSS functions that return an inverted pulse to be used as a NOT gate. We can however reduce the number of `calc()` calls by using `max( <calculation>, 0 )`, as it seems nested `calc()` calls causes issues with browser memory... 
*/

	/* New isLeapYear calculation */
	--isLeapYear: max(min(var(--centuryLeap), var(--L2DLeap)), min(var(--L2DLeap), 1 - var(--L2DDbl0)));
	
	/* Calculate month value with leap year taken into consideration */
	/* Essentially monthKey - isLeapYear * monthLeap, aka: monthKey - MIN(isLeapYear, monthLeap) */

	--monthKeyRevised: max(var(--monthKey) - min(var(--isLeapYear), var(--monthLeap)), 0);
	
	/* *** CALCULATION OF DAY OF WEEK *** */
	/* Now we simply do the following:

	1) Start with the last two digits, integer divided by 4, and get the modulo 7 of that. This is --L2Ddiv4m7
	2) Add the month key, subtracting 1 if it is January or February in a leap year. This is --monthKeyRevised
	4) Add the century key. This is --centuryKey
	5) Get the last two digits of the year again and get the modulo 7 of that value. Add this result. This is --L2Dm7
	*/
	--preMod7: max(var(--L2Ddiv4m7) + var(--monthKeyRevised) + var(--centuryKey) + var(--L2Dm7), 0);
	/* 6) Get the mod 7 value of the final sum (0 = Sunday, 6 = Saturday) and perform a day shift 
		by adding 1 so that we have a column position to start the calendar, 1 through to 7 */
	--DOW: max(mod(var(--preMod7), 7) + 1, 0);

	/* These are the counter resets for the debug window */
	counter-reset: 
		centuryKey var(--centuryKey, -1) 
		centuryLeap	var(--centuryLeap, -1)
		L2Ddiv4m7 var(--L2Ddiv4m7, -1)
		L2Dm7 var(--L2Dm7, -1)
		L2DLeap var(--L2DLeap, -1)
		L2DDbl0 var(--L2DDbl0, -1)
		monthKey var(--monthKey, -1)
		v29 var(--v29, -1)
		v30 var(--v30, -1)
		v31 var(--v31, -1)
		isFeb var(--isFeb, -1)
		monthLeap var(--monthLeap, -1)
		isLeapYear var(--isLeapYear, -1)
		monthKeyRevised var(--monthKeyRevised, -1)
		preMod7 var(--preMod7, -1)
		DOW var(--DOW, -1);
}

/* I'm leaving this debug window here so that developers can see how these values are calculated */

#cpu {
	position: relative;
	top: 20rem;
	background-color: yellow;
	height: 25rem;
	width: 23rem;
	color: black;
	display: none;
}

#cpu > * {
	text-align: left;
	float: left;
}

#cpu:after {
	content: 
			"centuryKey: "	counter(centuryKey) "\A"
			"centuryLeap: " counter(centuryLeap) "\A"
			"L2Ddiv4m7: "		counter(L2Ddiv4m7) "\A"
			"L2Dm7: "				counter(L2Dm7) "\A"
			"L2DLeap: "			counter(L2DLeap) "\A"
			"L2DDbl0: "			counter(L2DDbl0) "\A"
			"monthKey: "		counter(monthKey) "\A"
			"v29: "					counter(v29) "\A"
			"v30: " 				counter(v30) "\A"
			"v31: "					counter(v31) "\A"
			"isFeb: "				counter(isFeb) "\A"
			"monthLeap: "		counter(monthLeap) "\A"
			"isLeapYear:"		counter(isLeapYear) "\A"
			"monthKeyRevised: "		counter(monthKeyRevised) "\A"
			"preMod7: "		counter(preMod7) "\A"
			"DOW: "		counter(DOW) "\A"
	;
	
	position: absolute;
	top: 4rem;
	left: 8px;
	white-space: pre;
}

/* Calendar Styling */

.calendar-wrapper {
	width: 450px;
/* 	position: absolute; */
	top: 32px;
	z-index: 0;
	margin: 1rem auto 0 auto;
	font-size: 1.5rem;
	border: 2px solid black;
}

.calendar {
	color: #000;
	display: grid;
	grid-template-columns: repeat(7, 1fr);
	z-index: 0;
}

.calendar li {
	width: max(450px / 7, 0);
}

.weekday {
	background: #eee;
	z-index: 0;
	padding: 2px 8px 2px 2px;
	margin-bottom: 4px;
	text-align: right;
	font-weight: 700;
}

ul {
	list-style: none;
	margin: 0;
	padding: 0;
	text-align: center;
	z-index: 0;
}

ul li:not(.weekday) {
	z-index: 0;
	text-align: right;
	padding-right: 10px;
}

#day-01 {
	grid-column-start: var(--DOW);
}

#day-29 {
	opacity: max(var(--v29) + min(var(--isLeapYear), var(--isFeb)) - min(var(--v29), var(--isFeb)), 0);
	/* 
		Explanation:
			29 L F Show29?
		   0 0 0 0 (These conditions will never happen together)
			 0 0 1 0 (Common years display in Feb, no Feb 29)
			 0 1 0 0 (These conditions will never happen together)
			 0 1 1 1 (Leap years display in Feb, show Feb 29)
			 1 0 0 1 (Common years display for other months, show XXX 29)
			 1 0 1 0 (These conditions will never happen together)
			 1 1 0 1 (Leap years display for other months, show XXX 29)
			 1 1 1 1 (These conditions will never happen together, default to show Feb 29)

		Equivalent Boolean equation for this truth table: (a AND NOT c) OR (b AND c)
		If we express this in AND-NOT format we get: (NOT ((NOT a) AND (NOT c))) AND (NOT ((NOT b) AND c))
		Algebraically, this is equivalent to: -abc^2 + abc + ac^2 - 2ac + a + bc^2 - c^2 + c

		Using the Boolean Pulse rule (i.e. because all values are either 1 or 0, x^n = x) all indices can be stripped:
		-abc + abc + ac - 2ac + a + bc - c + c

		This simplifies to: 
		a + bc - ac 
	
		As `bc` and `ac` are equivalent to `b * c` and `a * c` respectively, which are in turn equivalent to `b AND c` and `a AND c` we can apply the use of min() to create equivalent logic gates
	
		Using a = var(--v29), b = var(--isLeapYear) and c = var(--isFeb) we get the calculation above.
	*/
}

#day-30 {
	opacity: var(--v30);
}

#day-31 {
	opacity: var(--v31);
}
